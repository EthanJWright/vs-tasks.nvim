*vs-tasks.txt*  VS Code task runner integration for Neovim

Author:  Ethan Wright
License: MIT
                                                                    *vs-tasks*

==============================================================================
CONTENTS                                                    *vs-tasks-contents*

    1. Introduction ........................... |vs-tasks-introduction|
    2. Features .............................. |vs-tasks-features|
    3. Installation .......................... |vs-tasks-installation|
    4. Configuration ......................... |vs-tasks-configuration|
    5. Usage ................................ |vs-tasks-usage|
    6. Tasks Configuration ................... |vs-tasks-tasks-config|
    7. Functions ............................ |vs-tasks-functions|
    8. Variables ............................ |vs-tasks-variables|

==============================================================================
1. INTRODUCTION                                         *vs-tasks-introduction*

VS Tasks is a Telescope plugin that loads and runs tasks conforming to VS Code's
tasks format (https://code.visualstudio.com/docs/editor/tasks).

==============================================================================
2. FEATURES                                               *vs-tasks-features*

Core Features:~
    ‚Ä¢ ‚öô  Run commands in terminal (split or float)
    ‚Ä¢ üìÅ Source tasks from .vscode/tasks.json
    ‚Ä¢ üì¶ Source tasks from package.json scripts
    ‚Ä¢ üëÄ Run tasks as watched jobs
    ‚Ä¢ üßµ Run tasks in background as jobs
    ‚Ä¢ üìñ Browse history of completed background jobs
    ‚Ä¢ ‚úèÔ∏è  Edit input variables for the session
    ‚Ä¢ üîÑ Use VS Code variables in commands (limited support)
    ‚Ä¢ üöÄ Use VS Code launch.json pattern (limited support)
    ‚Ä¢ ‚ü≥  Run tasks from history, sorted by most used
    ‚Ä¢ üêö Run shell commands with .run() or <C-r>
    ‚Ä¢ üìù Basic support for option picker (similar to extension.commandvariable)

==============================================================================
3. INSTALLATION                                       *vs-tasks-installation*

Required Dependencies:~
    ‚Ä¢ nvim-lua/popup.nvim
    ‚Ä¢ nvim-lua/plenary.nvim
    ‚Ä¢ nvim-telescope/telescope.nvim

With vim-plug:>
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'EthanJWright/vs-tasks.nvim'
<
With packer.nvim:>
    use {
      'EthanJWright/vs-tasks.nvim',
      requires = {
        'nvim-lua/popup.nvim',
        'nvim-lua/plenary.nvim',
        'nvim-telescope/telescope.nvim'
      }
    }
<
With lazy.nvim:>
    {
      "EthanJWright/vs-tasks.nvim",
      dependencies = {
        "nvim-lua/popup.nvim",
        "nvim-lua/plenary.nvim",
        "nvim-telescope/telescope.nvim",
      },
    }
<

==============================================================================
4. CONFIGURATION                                     *vs-tasks-configuration*

Basic Setup:~
>
    require("vstask").setup({
      cache_json_conf = true,     -- cache json configuration
      cache_strategy = "last",    -- "most" or "last" used
      config_dir = ".vscode",     -- tasks.json directory
      terminal = 'nvim',          -- 'nvim' or 'toggleterm'
      autodetect = {
        npm = "on"               -- autodetect npm scripts
      }
    })
<

Recommended Key Mappings:~
>
    nnoremap <Leader>ta :lua require("telescope").extensions.vstask.tasks()<CR>
    nnoremap <Leader>ti :lua require("telescope").extensions.vstask.inputs()<CR>
    nnoremap <Leader>tc :lua require("telescope").extensions.vstask.clear_inputs()<CR>
    nnoremap <Leader>th :lua require("telescope").extensions.vstask.history()<CR>
    nnoremap <Leader>tl :lua require('telescope').extensions.vstask.launch()<CR>
    nnoremap <Leader>tj :lua require("telescope").extensions.vstask.jobs()<CR>
    nnoremap <Leader>t; :lua require("telescope").extensions.vstask.jobhistory()<CR>
<

Terminal Options:~                                    *vs-tasks-term-opts*
>
    term_opts = {
      vertical = {
        direction = "vertical",
        size = "80"
      },
      horizontal = {
        direction = "horizontal",
        size = "10"
      },
      current = {
        direction = "float",
      },
      tab = {
        direction = 'tab',
      }
    }
<

Telescope Key Mappings:~                           *vs-tasks-telescope-keys*
>
    telescope_keys = {
      vertical = '<C-v>',
      split = '<C-p>',
      tab = '<C-t>',
      current = '<CR>',
      background = '<C-b>',
      watch_job = '<C-w>',
      kill_job = '<C-d>',
      run = '<C-r>',
    }
<

JSON5 Support:~                                    *vs-tasks-json5*

To support JSON5 files with comments and trailing commas:

1. Add json5 parser to your dependencies:>
    {
      'Joakker/lua-json5',
      run = './install.sh'
    }
<

2. Configure the parser in setup:>
    require("vstask").setup({
        json_parser = require('json5').parse
    })
<

==============================================================================
5. USAGE                                                   *vs-tasks-usage*

Task Telescope Mappings:~
    <CR>    Open in toggleterm
    <C-v>   Open in vertical split terminal
    <C-p>   Open in split terminal
    <C-b>   Run task as background job
    <C-w>   Run task as watched background job
    <C-r>   Run input as command

Jobs Telescope Mappings:~
    <CR>    Open output in temporary buffer
    <C-w>   Toggle watch status
    <C-d>   Kill job

==============================================================================
6. TASKS CONFIGURATION                              *vs-tasks-tasks-config*

Example tasks.json:~
>
    {
      "inputs": [
        {
          "default": "",
          "description": "Some term",
          "id": "phrase",
          "type": "promptString"
        },
        {
          "type": "command",
          "id": "cowsay",
          "command": "extension.commandvariable.pickStringRemember",
          "args": {
            "description": "what type of cow?",
            "options": [
              ["normal cow", "mooooo"],
              ["imposture", "bark bark"]
            ]
          }
        }
      ],
      "tasks": [
        {
          "command": "echo ${input:phrase} | cowsay",
          "label": "üêÆ Cowsay",
          "type": "shell"
        }
      ]
    }
<

==============================================================================
7. FUNCTIONS                                           *vs-tasks-functions*

                                                *vs-tasks.tasks()*
tasks()
    Opens the task picker in Telescope. Shows all available tasks from
    .vscode/tasks.json and package.json scripts. Tasks can be run in various
    modes:
        <CR>    Run in current window
        <C-v>   Run in vertical split
        <C-p>   Run in horizontal split
        <C-b>   Run as background job
        <C-w>   Run as watched job
        <C-r>   Run as shell command

                                                *vs-tasks.run()*
run()
    Opens an empty task picker that allows running arbitrary shell commands.
    Supports the same run modes as tasks().

                                                *vs-tasks.inputs()*
inputs()
    Opens the input variables picker. Allows setting values for variables used
    in task commands. Supports:
        ‚Ä¢ promptString - Free text input
        ‚Ä¢ pickString - Selection from predefined options
    Values persist for the current session.

                                                *vs-tasks.history()*
history()
    Shows previously run tasks, sorted by frequency of use. Allows quick access
    to commonly used tasks. Supports the same run modes as tasks().

                                                *vs-tasks.launch()*
launch()
    Opens the launch configuration picker. Shows all configurations from
    .vscode/launch.json. Supports:
        <CR>    Launch in current window
        <C-v>   Launch in vertical split
        <C-p>   Launch in horizontal split

                                                *vs-tasks.close()*
close()
    Closes the task runner terminal window when using toggleterm as the
    terminal handler.

                                                *vs-tasks.jobs()*
jobs()
    Shows all currently running background tasks. Features:
        ‚Ä¢ Live output preview
        ‚Ä¢ Watch mode toggle (<C-w>)
        ‚Ä¢ Kill running tasks (<C-d>)
        ‚Ä¢ Open output in buffer (<CR>)
        ‚Ä¢ Status indicators (üü¢ success, üî¥ failed, üü† running)

                                                *vs-tasks.jobhistory()*
jobhistory()
    Displays history of completed background tasks. Shows:
        ‚Ä¢ Task name and runtime
        ‚Ä¢ Exit status
        ‚Ä¢ Full output in preview
        ‚Ä¢ Open output in buffer (<CR>)

                                                *vs-tasks.clear_inputs()*
clear_inputs()
    Clears all stored input variable values for the current session.

                                                *vs-tasks.get_last()*
get_last()
    Returns the command string of the last executed task.

All functions accept an optional table of Telescope options that can customize
the picker appearance and behavior.

==============================================================================
8. VARIABLES                                         *vs-tasks-variables*

VS Tasks supports a subset of VS Code variables:
    ${workspaceFolder}      Current workspace folder
    ${relativeFile}         Current file relative to workspace
    ${relativeFileDirname}  Current file's directory relative to workspace
    ${input:variableName}   Input variable value

Schema Support:~
    ‚úì Tasks: Label
    ‚úì Tasks: Command
    ‚úì Tasks: ID
    ‚úì Inputs: Description
    ‚úì Inputs: Default
8. VARIABLES                                         *vs-tasks-variables*

VS Tasks supports the following VS Code variables:

Workspace:~
    ${workspaceFolder}              Current workspace root directory
    ${workspaceFolderBasename}      Name of the workspace folder
    ${cwd}                          Current working directory

File:~
    ${file}                         Full path of current file
    ${fileWorkspaceFolder}          Workspace folder containing current file
    ${relativeFile}                 File path relative to workspace root
    ${relativeFileDirname}          Directory path relative to workspace root
    ${fileBasename}                 Current file name with extension
    ${fileBasenameNoExtension}      Current file name without extension
    ${fileDirname}                  Full directory path of current file
    ${fileExtname}                  Extension of current file (with dot)

Editor:~
    ${lineNumber}                   Current line number in file
    ${selectedText}                 Currently selected text
    ${input:variableName}          Value of custom input variable

System:~
    ${execPath}                     Path to running Neovim executable
    ${pathSeparator}               OS path separator ('/' or '\')

Examples:~
    ${workspaceFolder}/build        /home/user/project/build
    ${relativeFile}                 src/main.lua
    ${fileBasename}                 main.lua
    ${fileExtname}                  .lua
    ${pathSeparator}               / (Unix) or \ (Windows)

Schema Support:~
    ‚úì Tasks: Label
    ‚úì Tasks: Command
    ‚úì Tasks: ID
    ‚úì Inputs: Description
    ‚úì Inputs: Default

For full VS Code variables reference:
https://code.visualstudio.com/docs/editor/variables-reference

 vim:tw=78:ts=8:ft=help:norl:

